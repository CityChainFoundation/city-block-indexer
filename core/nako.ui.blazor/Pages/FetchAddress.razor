@page "/FetchAddress/{addresshash}"
@using System.Threading
@inject HttpClient Http
@inject IUriHelper UriHelper
@inject GlobalData globalData

<h1>Address Info</h1>

<p>This component shows information about a block.</p>

@if (address == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Item</th>
                <th>Info</th>
            </tr>
        </thead>
        <tbody>
            <tr><td>Address</td><td>@address.Address </td></tr>
            <tr><td>Balance</td><td>@(address.Balance / 100000000)  @address.CoinTag</td></tr>
            <tr><td>UnconfirmedBalance</td><td>@(address.UnconfirmedBalance / 100000000) @address.CoinTag</td></tr>
            <tr><td>TotalReceived</td><td>@(address.TotalReceived / 100000000)  @address.CoinTag</td></tr>
            <tr><td>TotalSent</td><td>@(address.TotalSent / 100000000)  @address.CoinTag</td></tr>
        </tbody>
    </table>

    <div class="list-group">
        @foreach (var transaction in address.Transactions)
        {
            <div class="list-group-item list-group-item-action">
                <table class="table table-sm table-borderless">
                    <tbody>
                        <tr><td>BlockIndex:</td><td @onclick="@(() => NavigateToBlockIndex(transaction.BlockIndex.Value))" style="cursor: pointer;" class=" btn btn-link">@transaction.BlockIndex </td></tr>
                        <tr><td>Confirmations:</td><td>@transaction.Confirmations</td></tr>
                        <tr><td>Output Hash:</td><td @onclick="@(() => NavigateToTransactionHash(transaction.TransactionHash))" style="cursor: pointer;" class=" btn btn-link">@transaction.TransactionHash</td></tr>
                        <tr><td>Output Index:</td><td>@transaction.Index</td></tr>
                        <tr><td>PubScriptHex</td><td>@transaction.PubScriptHex</td></tr>

                        @if (string.IsNullOrEmpty(transaction.SpendingTransactionHash))
                        {
                            <tr><td>Value</td><td class="text-success">+ @(transaction.Value / 100000000) @address.CoinTag</td></tr>

                        }
                        else
                        {
                            <tr><td>Value</td><td class="text-danger">- @(transaction.Value / 100000000) @address.CoinTag</td></tr>
                            <tr><td>Spent in:</td><td @onclick="@(() => NavigateToTransactionHash(transaction.SpendingTransactionHash))" style="cursor: pointer;" class="btn btn-link">@transaction.SpendingTransactionHash</td></tr>
                        }

                    </tbody>
                </table>
            </div>
        }
    </div>

    // Assume that if maxitems equals count there is more to fetch.
    @if (this.maxitems != -1 && this.address.Transactions.Count() == this.maxitems)
    {
        <br />
        <button type="button" @onclick="FetchMoreAddresses" class="btn btn-light text-center">Fetch another 100</button>

        // Not to abuse the fetch all button
        @if (this.maxitems > 300)
        {
            <button type="button" @onclick="FetchAllAddresses" class="btn btn-light text-center">Fetch all</button>
        }

        <br />
    }

}

@code {

    [Parameter]
    private string addresshash { get; set; }

    private int maxitems { get; set; } = 10;

    private void NavigateToTransactionHash(string trxHash)
    {
        UriHelper.NavigateTo($"FetchTransaction/{trxHash}");
    }

    private void NavigateToBlockIndex(long index)
    {
        UriHelper.NavigateTo($"fetchblock/{index}");
    }

    DataTypes.QueryAddress address;

    private async Task FetchMoreAddresses()
    {
        this.maxitems += 100;

        address = await Http.GetJsonAsync<DataTypes.QueryAddress>($"http://{this.globalData.ApiUrl}/api/Query/address/{this.addresshash}/confirmations/0/transactions/{this.maxitems}?api-version=1.0");
    }

    private async Task FetchAllAddresses()
    {
        this.maxitems = -1;

        address = await Http.GetJsonAsync<DataTypes.QueryAddress>($"http://{this.globalData.ApiUrl}/api/Query/address/{this.addresshash}/confirmations/0/transactions?api-version=1.0");
    }

    protected override async Task OnInitAsync()
    {
        address = await Http.GetJsonAsync<DataTypes.QueryAddress>($"http://{this.globalData.ApiUrl}/api/Query/address/{this.addresshash}/confirmations/0/transactions/{this.maxitems}?api-version=1.0");
    }
}
