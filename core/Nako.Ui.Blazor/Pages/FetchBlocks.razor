@page "/fetchblocks"
@page "/fetchblocks/{blockindex:int}/{blockcount:int}"
@inject HttpClient Http
@inject IUriHelper UriHelper
@inject GlobalData globalData

<h1>Recent Blocks</h1>

<p>This component shows recent blocks.</p>

@if (blocks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table _table-hover _table-sm">
        <thead>
            <tr>
                <th>Height</th>
                <th>Time</th>
                <th>Transactions</th>
                <th>Difficulty</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var block in blocks.Blocks)
            {
                <tr>
                    <td style="cursor: pointer;" class="btn btn-link" @onclick="@(() => NavigateToBlockIndex(block.BlockIndex))">@block.BlockIndex</td>
                    <td>@UnixTimeToDateTime((ulong)@block.BlockTime)</td>
                    <td>@block.TransactionCount</td>
                    <td>@block.Bits</td>
                </tr>
            }
        </tbody>
    </table>

    <button type="button" @onclick="NavigateToMoreBlocks" class="btn btn-light text-center">Fetch more blocks</button>
    <br />
}

@code {
    [Parameter]
    private int blockindex { get; set; } = -1;

    [Parameter]
    private int blockcount { get; set; } = 10;

    DataTypes.QueryBlocks blocks;

    private async Task NavigateToMoreBlocks()
    {
        var blk = blocks.Blocks.Last();
        var moreblocks = await Http.GetJsonAsync<DataTypes.QueryBlocks>($"http://{this.globalData.ApiUrl}/api/Query/block/Index/{blk.BlockIndex - 1}/Count/{this.blockcount}?api-version=1.0");

        moreblocks.Blocks = this.blocks.Blocks.Concat(moreblocks.Blocks).ToArray();

        this.blocks = moreblocks;
    }

    private void NavigateToBlockIndex(long index)
    {
        UriHelper.NavigateTo($"fetchblock/{index}");
    }

    protected override async Task OnInitAsync()
    {
        blocks = await Http.GetJsonAsync<DataTypes.QueryBlocks>($"http://{this.globalData.ApiUrl}/api/Query/block/Index/{this.blockindex}/Count/{this.blockcount}?api-version=1.0");
    }

    private static DateTimeOffset unixRef = new DateTimeOffset(1970, 1, 1, 0, 0, 0, TimeSpan.Zero);

    public static string UnixTimeToDateTime(ulong timestamp)
    {
        TimeSpan span = TimeSpan.FromSeconds(timestamp);
        var blocktime = (unixRef + span);

        var ret = (DateTime.UtcNow - blocktime).ToString();

        ret = ret.Substring(0, ret.IndexOf("."));

        return ret;

    }

}
