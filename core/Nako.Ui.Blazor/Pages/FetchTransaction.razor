@page "/FetchTransaction"
@page "/FetchTransaction/{transactionhash}"
@inject HttpClient Http
@inject IUriHelper UriHelper
@inject GlobalData globalData

<h1>Transaction Info</h1>

<p>This component shows information about a block.</p>

@if (transaction == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Item</th>
                <th>Info</th>
            </tr>
        </thead>
        <tbody>
            <tr><td>Hash</td><td>@transaction.TransactionId</td></tr>
            <tr><td>BlockHash</td><td>@transaction.BlockHash</td></tr>
            <tr><td>BlockIndex</td><td style="cursor: pointer;" class="btn btn-link" @onclick="@(() => NavigateToBlockIndex(transaction.BlockIndex))">@transaction.BlockIndex</td></tr>
            <tr><td>Timestamp</td><td>@transaction.Timestamp</td></tr>
        </tbody>
    </table>

    <table class="table table-sm">
        <thead>
            <tr>
                <th>Inputs</th>
                <th>Outputs</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <div class="list-group">
                        @foreach (var input in transaction.Inputs)
                        {
                        <a style="cursor: pointer;" class="list-group-item list-group-item-action" @onclick="@(() => NavigateToTransactionkIndex(input.InputTransactionId))">
                            <p class="mb-1">Input index - @input.InputIndex</p>
                            <p class="mb-1">@input.InputTransactionId</p>
                            <p class="mb-1">[script]</p>

                        </a>
                        }
                    </div>
                </td>
                <td>
                    <div class="list-group">
                        @foreach (var output in transaction.Outputs)
                        {
                        <a style="cursor: pointer;" class="list-group-item list-group-item-action" @onclick="@(() => NavigateToTransactionkIndex(output.Address))">
                            <p class="mb-1">Output index - @output.Index</p>
                            <p class="mb-1">@output.Address</p>
                            <p class="mb-1">@output.OutputType</p>
                            <p class="mb-1">[script]</p>

                        </a>
                        }
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
}

@code {

    [Parameter]
    private string transactionhash { get; set; }

    private void NavigateToTransactionkIndex(string trxHash)
    {
        UriHelper.NavigateTo($"FetchTransaction/{trxHash}");
    }

    private void NavigateToBlockIndex(long index)
    {
        UriHelper.NavigateTo($"fetchblock/{index}");
    }

    DataTypes.QueryTransaction transaction;

    protected override async Task OnInitAsync()
    {
        transaction = await Http.GetJsonAsync<DataTypes.QueryTransaction>($"http://localhost:9000/api/Query/transaction/{this.transactionhash}?api-version=1.0");

    }
}
