@inject IUriHelper UriHelper
@inject GlobalData globalData
@inject HttpClient Http

    <div class="input-group">
        <div class="input-group-prepend">
            <span style="cursor: pointer;" @onclick="Navigate" class="input-group-text">Search</span>
        </div>

        <input type="search" style="max-width:60%" class="form-control"  placeholder="Blocks, transactions and addresses" @bind="Search"  @onkeyup="KeyUp" />

        <div class="input-group-prepend">
            <span style="cursor: pointer;" @onclick="Navigate" class="input-group-text">Find</span>
        </div>
    </div>


@code {
    private string Search { get; set; }

    private void KeyUp(UIKeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            this.Navigate();
        }
    }

    private async Task Navigate()
    {
        if(int.TryParse(this.Search,out int _))
        {
            UriHelper.NavigateTo($"fetchblock/{this.Search}");
            return;
        }

        var block = await Http.GetJsonAsync<DataTypes.QueryBlock>($"http://localhost:9000/api/Query/block/{this.Search}/1?api-version=1.0");

        if (block != null)
        {
            this.globalData.BlocksCache.Add(block.BlockIndex, block);

            UriHelper.NavigateTo($"fetchblock/{block.BlockIndex}");
            return;
        }

        var transaction = await Http.GetJsonAsync<DataTypes.QueryTransaction>($"http://localhost:9000/api/Query/transaction/{this.Search}?api-version=1.0");

        if(transaction != null)
        {
            UriHelper.NavigateTo($"FetchTransaction/{transaction.TransactionId}");
            return;
        }

        var address = await Http.GetJsonAsync<DataTypes.QueryAddress>($"http://localhost:9000/api/Query/address/{this.Search}/confirmations/0?api-version=1.0");

        if(address != null)
        {
            UriHelper.NavigateTo($"FetchAddress/{address.Address}");
            return;
        }

        // not found
    }

}
